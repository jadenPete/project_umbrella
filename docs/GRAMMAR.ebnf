(* Union expressions *)

Statement =
	| Assignment
	| Function
	| InfixMiscellaneous;

Expression = InfixMiscellaneous;
Primary =
	| Parenthesized
	| Float
	| Identifier
	| Integer
	| String;

Formatting =
	| IndentToken
	| OutdentToken
	| NewlineToken;

(* Statements *)

Assignment = Identifier {Formatting} "=" {Formatting} (Expression | Assignment);
Function =
	FunctionDeclaration
	{IndentToken | OutdentToken}
	":"
	(NewlineToken IndentedStatementList)?;

FunctionDeclaration =
	"fn"
	{Formatting}
	Identifier
	{Formatting}
	"("
	{Formatting}
	[FunctionParameters]
	{Formatting}
	")";

FunctionParameters = Identifier [{Formatting} "," {Formatting} FunctionParameters];
IndentedStatementList = {NewlineToken} [IndentToken StatementList (OutdentToken | EOF)];
StatementList;

(* Multi-token expressions *)

InfixMiscellaneous = InfixAddition {InfixMiscellaneousRight};
InfixMiscellaneousRight =
	(
		| {IndentToken | OutdentToken} Identifier {Formatting}
		| {Formatting} Identifier {IndentToken | OutdentToken}
	)
	InfixAddition;

InfixAddition = InfixMultiplication {InfixAdditionRight};
InfixAdditionRight =
	(
		| {IndentToken | OutdentToken} ("+" | "-") {Formatting}
		| {Formatting} ("+" | "-") {IndentToken | OutdentToken}
	)
	InfixMultiplication;

InfixMultiplication = Call {InfixMultiplicationRight};
InfixMultiplicationRight =
	(
		| {IndentToken | OutdentToken} ("*" | "/") {Formatting}
		| {Formatting} ("*" | "/") {IndentToken | OutdentToken}
	)
	PrefixOperation;

PrefixOperation = {Operator {IndentToken | OutdentToken}} If;
If =
	| (
		"if"
		{Formatting}
		Expression
		{Formatting}
		":"
		(NewlineToken IndentedStatementList)?
		{{NewlineToken}- ElseIf}
		[{NewlineToken}- Else]
	)

	| Call;

ElseIf = "else if" {Formatting} Expression {Formatting} ":" (NewlineToken IndentedStatementList)?;
Else = "else" {Formatting} ":" (NewlineToken IndentedStatementList)?;
Call = Select {CallRight};
CallRight =
	| {IndentToken | OutdentToken} "(" {Formatting} [CallArguments] {Formatting} ")"
	| SelectRight;

CallArguments = Expression [{Formatting} "," {Formatting} CallArguments];
Select = Primary {SelectRight};
SelectRight = {Formatting} "." {Formatting} Identifier;

(* Single-token expressions and primaries *)

Parenthesized = "(" Expression ")";
Float = FloatToken;
Identifier =
	| IdentifierToken
	| OperatorToken;

Integer = IntegerToken;
Operator = OperatorToken;
String = StringToken;
