(* Union expressions *)

Statement =
	| Assignment
	| Function
	| InfixMiscellaneous;

Expression = InfixMiscellaneous;
Primary =
	| Parenthesized
	| Float
	| Identifier
	| Integer
	| String;

Formatting =
	| IndentToken
	| OutdentToken
	| NewlineToken;

(* Statements *)

Assignment = Identifier {Formatting} "=" {Formatting} (Expression | Assignment);
Block = ":" [
	| {IndentToken | OutdentToken} Expression
	| {NewlineToken}- IndentToken StatementList (OutdentToken | EOF)
];

StatementList;
Function =
	"fn"
	{Formatting}
	Identifier
	{Formatting}
	FunctionParametersAndBody;

FunctionOrStructParameters = Identifier [{Formatting} "," {Formatting} FunctionOrStructParameters];
FunctionParametersAndBody =
	"("
	{Formatting}
	[FunctionOrStructParameters]
	{Formatting}
	")"
	{NewlineToken}
	Block;

Struct =
	"struct"
	{Formatting}
	Identifier
	{Formatting}
	"("
	{Formatting}
	FunctionParameters
	{Formatting}
	")"
	{NewlineToken}
	Block;

(* Multi-token expressions *)

InfixMiscellaneous = InfixAddition {InfixMiscellaneousRight};
InfixMiscellaneousRight =
	(
		| {IndentToken | OutdentToken} Identifier {Formatting}
		| {Formatting} Identifier {IndentToken | OutdentToken}
	)
	InfixAddition;

InfixAddition = InfixMultiplication {InfixAdditionRight};
InfixAdditionRight =
	(
		| {IndentToken | OutdentToken} ("+" | "-") {Formatting}
		| {Formatting} ("+" | "-") {IndentToken | OutdentToken}
	)
	InfixMultiplication;

InfixMultiplication = PrefixOperation {InfixMultiplicationRight};
InfixMultiplicationRight =
	(
		| {IndentToken | OutdentToken} ("*" | "/") {Formatting}
		| {Formatting} ("*" | "/") {IndentToken | OutdentToken}
	)
	PrefixOperation;

PrefixOperation = {Operator {IndentToken | OutdentToken}} If;
If =
	| (
		"if"
		{Formatting}
		Expression
		{Formatting}
		Block
		{{NewlineToken}- ElseIf}
		[{NewlineToken}- Else]
	)

	| AnonymousFunction;

ElseIf =
	"else"
	{Formatting}
	"if"
	{Formatting}
	Expression
	{Formatting}
	Block;

Else = "else" {Formatting} Block;
AnonymousFunction =
	| FunctionParametersAndBody
	| Call;

Call = Select {CallRight};
CallRight =
	| {IndentToken | OutdentToken} "(" {Formatting} [CallArguments] {Formatting} ")"
	| SelectRight;

CallArguments = Expression [{Formatting} "," {Formatting} CallArguments];
Select = Primary {SelectRight};
SelectRight = {Formatting} "." {Formatting} Identifier;

(* Single-token expressions and primaries *)

Parenthesized = "(" {Formatting} Expression {Formatting} ")";
Tuple =
	"("
	{Formatting}
	(Expression {{Formatting} "," {Formatting} Expression}- | Expression? {Formatting} ",")
	{Formatting}
	")";

Float = FloatToken;
Identifier =
	| IdentifierToken
	| OperatorToken;

Integer = IntegerToken;
Operator = OperatorToken;
String = StringToken;
